version: "3"

services:

  discoveryservice:
    image: discoveryservice:latest
    container_name: discoveryservice
    build:
      context: ./cloud/discoveryservice
      dockerfile: Dockerfile
    environment:
      - TZ=Asia/Seoul
    ports:
      - "8761:8761"
    restart: always
    networks:
      - backend

  apigateway:
    image: apigateway:latest
    container_name: apigateway
    build:
      context: ./cloud/apigateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - TZ=Asia/Seoul
    depends_on:
      - discoveryservice
    restart: always
    networks:
      - backend

  config:
    image: config:latest
    container_name: config
    build:
      context: ./cloud/config
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    environment:
      - TZ=Asia/Seoul
    depends_on:
      - discoveryservice
    restart: always
    networks:
      - backend

  member-service:
    image: member-service:latest
    container_name: member-service
    build:
      context: ./member-service
      dockerfile: Dockerfile
    environment:
      - TZ=Asia/Seoul
    restart: always
    networks:
      - backend

  team-service:
    image: team-service:latest
    container_name: team-service
    build:
      context: ./team-service
      dockerfile: Dockerfile
    environment:
      - TZ=Asia/Seoul
    restart: always
    networks:
      - backend

  chatting-service:
    image: chatting-service:latest
    container_name: chatting-service
    build:
      context: ./chatting-service
      dockerfile: Dockerfile
    environment:
      - TZ=Asia/Seoul
    restart: always
    networks:
      - backend

  file-service:
    image: file-service:latest
    container_name: file-service
    build:
      context: ./file-service
      dockerfile: Dockerfile
    environment:
      - TZ=Asia/Seoul
    restart: always
    networks:
      - backend

  auth-service:
    image: auth-service:latest
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    environment:
      - TZ=Asia/Seoul
    ports:
      - "9999:9999"
    restart: always
    networks:
      - backend

  fcm-service:
    image: fcm-service:latest
    container_name: fcm-service
    build:
      context: ./fcm-service
      dockerfile: Dockerfile
    environment:
      - TZ=Asia/Seoul
    restart: always
    networks:
      - backend

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://postgres:5432/sonar
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=sonar
      - TZ=Asia/Seoul
    ports:
      - "9000:9000"
    depends_on:
      - postgres
    restart: always
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - sonarnet

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
      - TZ=Asia/Seoul
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sonarnet

volumes:
  mysql-data:
    name: mysql-data
  redis-data:
    name: redis-data
  sonarqube_data:
    name: sonarqube_data
  sonarqube_extensions:
    name: sonarqube_extensions
  sonarqube_logs:
    name: sonarqube_logs
  postgres_data:
    name: postgres_data

networks:
  backend:
    external:
      name: backend
  sonarnet:
    external:
      name: sonarnet
